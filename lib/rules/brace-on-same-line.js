"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _braceOnSameLine = require("eslint-plugin-brace-rules/lib/rules/brace-on-same-line");

var _enums = require("../enums");

var _styles, _messages;

var CLASS_DECLARATION = _enums.BlockTypes.CLASS_DECLARATION,
    CLASS_EXPRESSION = _enums.BlockTypes.CLASS_EXPRESSION,
    FUNCTION_EXPRESSION = _enums.BlockTypes.FUNCTION_EXPRESSION,
    METHOD_DEFINITION = _enums.BlockTypes.METHOD_DEFINITION;
var BODY = _enums.MessageIds.BODY,
    CLOSE = _enums.MessageIds.CLOSE,
    CLOSE_SINGLE = _enums.MessageIds.CLOSE_SINGLE,
    NO_SINGLE = _enums.MessageIds.NO_SINGLE,
    OPEN = _enums.MessageIds.OPEN,
    OPEN_ALLMAN = _enums.MessageIds.OPEN_ALLMAN;
var ALWAYS = _enums.PropertyValues.ALWAYS,
    IGNORE = _enums.PropertyValues.IGNORE,
    NEVER = _enums.PropertyValues.NEVER;
var ALLMAN = _enums.Styles.ALLMAN,
    OTBS = _enums.Styles.OTBS;
var blocks = [CLASS_DECLARATION, CLASS_EXPRESSION, FUNCTION_EXPRESSION, METHOD_DEFINITION];

var initStyles = function initStyles(value) {
  return blocks.reduce(function (acc, type) {
    acc[type] = value;
    return acc;
  }, {});
};

var styles = (_styles = {}, (0, _defineProperty2["default"])(_styles, OTBS, initStyles(ALWAYS)), (0, _defineProperty2["default"])(_styles, ALLMAN, initStyles(NEVER)), _styles);

var create = function create(context) {
  var _objectSpread2;

  var sourceCode = context.getSourceCode();
  var styleValue = context.options[0] || OTBS;
  var style = typeof styleValue === 'string' ? styles[styleValue] : styleValue;
  var options = (0, _objectSpread3["default"])({}, style, context.options[1]);
  blocks.forEach(function (type) {
    if (!(type in options)) return;

    if (options[type] === IGNORE) {
      delete options[type];
    } else {
      options[type] = options[type] === ALWAYS;
    }
  });

  var insertBreakBefore = function insertBreakBefore(token) {
    var whitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return function (fixer) {
      return fixer.insertTextBefore(token, "\n".concat(whitespace));
    };
  };

  var removeBreakBetween = function removeBreakBetween(startToken, endToken) {
    return function (fixer) {
      return fixer.replaceTextRange([startToken.range[1], endToken.range[0]], ' ');
    };
  };

  var getWhitespaceBefore = function getWhitespaceBefore(token) {
    if (!token || !token.loc) return '';
    var src = sourceCode.getText(token, token.loc.start.column);
    var indent = /^(\s+)/.exec(src);
    return indent ? indent[1] : '';
  };

  var checkBlock = function checkBlock(parentNode, expectSameLine) {
    var reportParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!('body' in parentNode) || !('type' in parentNode.body)) return;
    var type = parentNode.body.type;
    if (type !== 'BlockStatement' && type !== 'ClassBody') return;
    var node = parentNode.body;
    var previousToken = sourceCode.getTokenBefore(node);
    var curlyToken = sourceCode.getFirstToken(node);
    var curlyTokenEnd = sourceCode.getLastToken(node);
    if (!previousToken || !curlyTokenEnd || !curlyToken) return;
    var allOnSameLine = previousToken.loc.start.line === curlyTokenEnd.loc.start.line;
    var allowSingleLine = options.allowSingleLine;
    if (allowSingleLine && allOnSameLine) return;
    var reportNode = parentNode || node;
    var whitespace = getWhitespaceBefore(parentNode);

    if (allOnSameLine) {
      var reportDescriptor = {
        node: reportParent ? reportNode.parent : reportNode,
        messageId: NO_SINGLE,
        fix: insertBreakBefore(curlyTokenEnd, whitespace)
      };
      context.report(reportDescriptor);
      return;
    }

    var startSameLine = previousToken.loc.start.line === curlyToken.loc.start.line;

    if (startSameLine !== expectSameLine) {
      var _reportDescriptor = {
        node: reportParent ? reportNode.parent : reportNode,
        messageId: startSameLine ? OPEN_ALLMAN : OPEN,
        fix: startSameLine ? insertBreakBefore(curlyToken, whitespace) : removeBreakBetween(previousToken, curlyToken)
      };
      context.report(_reportDescriptor);
    }

    if (!('body' in node)) return;
    var body = node.body;
    if (!('length' in body) || !body.length) return;

    var _body = (0, _slicedToArray2["default"])(body, 1),
        first = _body[0];

    if (first.loc && first.loc.start.line === curlyToken.loc.start.line) {
      var _reportDescriptor2 = {
        node: first,
        messageId: BODY,
        fix: insertBreakBefore(curlyToken, (0, _lodash.repeat)(' ', first.loc.start.column))
      };
      context.report(_reportDescriptor2);
    }

    var lastToken = body[body.length - 1];
    var endOnSameLine = lastToken.loc && lastToken.loc.end.line === curlyTokenEnd.loc.end.line;

    if (endOnSameLine) {
      var _reportDescriptor3 = {
        node: lastToken,
        messageId: allowSingleLine ? CLOSE_SINGLE : CLOSE,
        fix: insertBreakBefore(curlyTokenEnd, whitespace)
      };
      context.report(_reportDescriptor3);
    }
  };

  var checkNode = function checkNode(type) {
    if (!(type in options)) return _lodash.noop;
    return function (node) {
      var _ref = node,
          parent = _ref.parent;
      var applyParent = type === FUNCTION_EXPRESSION && parent && parent.type === METHOD_DEFINITION && METHOD_DEFINITION in options;
      var expectSameLine = applyParent ? options[METHOD_DEFINITION] : options[type];
      checkBlock(node, expectSameLine, applyParent);
    };
  };

  var result = (0, _objectSpread3["default"])({}, (0, _braceOnSameLine.create)(context), (_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, CLASS_DECLARATION, checkNode(CLASS_DECLARATION)), (0, _defineProperty2["default"])(_objectSpread2, CLASS_EXPRESSION, checkNode(CLASS_EXPRESSION)), (0, _defineProperty2["default"])(_objectSpread2, FUNCTION_EXPRESSION, checkNode(FUNCTION_EXPRESSION)), (0, _defineProperty2["default"])(_objectSpread2, METHOD_DEFINITION, checkNode(METHOD_DEFINITION)), _objectSpread2));
  return result;
};

var rule = {
  create: create,
  meta: (0, _lodash.merge)({}, _braceOnSameLine.meta || {}, {
    schema: [{
      oneOf: [{}, {
        properties: {
          ClassDeclaration: {
            "enum": [ALWAYS, NEVER, IGNORE]
          }
        }
      }]
    }],
    messages: (_messages = {}, (0, _defineProperty2["default"])(_messages, BODY, 'Statement inside of curly braces should be on next line.'), (0, _defineProperty2["default"])(_messages, CLOSE, 'Closing curly brace does not appear on the same line as the subsequent block.'), (0, _defineProperty2["default"])(_messages, CLOSE_SINGLE, 'Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.'), (0, _defineProperty2["default"])(_messages, NO_SINGLE, 'Single-line blocks defining is not allowed by configuration - brackets must be placed on different lines.'), (0, _defineProperty2["default"])(_messages, OPEN, 'Opening curly brace does not appear on the same line as controlling statement.'), (0, _defineProperty2["default"])(_messages, OPEN_ALLMAN, 'Opening curly brace appears on the same line as controlling statement.'), _messages)
  })
};
var _default = rule;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,