"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _braceOnSameLine = require("eslint-plugin-brace-rules/lib/rules/brace-on-same-line");

var _enums = require("../enums");

var _styles, _messages;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var CLASS_DECLARATION = _enums.BlockTypes.CLASS_DECLARATION,
    CLASS_EXPRESSION = _enums.BlockTypes.CLASS_EXPRESSION,
    FUNCTION_EXPRESSION = _enums.BlockTypes.FUNCTION_EXPRESSION,
    METHOD_DEFINITION = _enums.BlockTypes.METHOD_DEFINITION;
var BODY = _enums.MessageIds.BODY,
    CLOSE = _enums.MessageIds.CLOSE,
    CLOSE_SINGLE = _enums.MessageIds.CLOSE_SINGLE,
    NO_SINGLE = _enums.MessageIds.NO_SINGLE,
    OPEN = _enums.MessageIds.OPEN,
    OPEN_ALLMAN = _enums.MessageIds.OPEN_ALLMAN;
var ALWAYS = _enums.PropertyValues.ALWAYS,
    IGNORE = _enums.PropertyValues.IGNORE,
    NEVER = _enums.PropertyValues.NEVER;
var ALLMAN = _enums.Styles.ALLMAN,
    OTBS = _enums.Styles.OTBS;
var blocks = [CLASS_DECLARATION, CLASS_EXPRESSION, FUNCTION_EXPRESSION, METHOD_DEFINITION];

var initStyles = function initStyles(value) {
  return blocks.reduce(function (acc, type) {
    acc[type] = value;
    return acc;
  }, {});
};

var styles = (_styles = {}, (0, _defineProperty2["default"])(_styles, OTBS, initStyles(ALWAYS)), (0, _defineProperty2["default"])(_styles, ALLMAN, initStyles(NEVER)), _styles);

var create = function create(context) {
  var _objectSpread2;

  var sourceCode = context.getSourceCode();
  var styleValue = context.options[0] || OTBS;
  var style = typeof styleValue === 'string' ? styles[styleValue] : styleValue;

  var options = _objectSpread({}, style, {}, context.options[1]);

  blocks.forEach(function (type) {
    if (!(type in options)) return;

    if (options[type] === IGNORE) {
      delete options[type];
    } else {
      options[type] = options[type] === ALWAYS;
    }
  });

  var insertBreakBefore = function insertBreakBefore(token) {
    var whitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return function (fixer) {
      return fixer.insertTextBefore(token, "\n".concat(whitespace));
    };
  };

  var removeBreakBetween = function removeBreakBetween(startToken, endToken) {
    return function (fixer) {
      return fixer.replaceTextRange([startToken.range[1], endToken.range[0]], ' ');
    };
  };

  var getWhitespaceBefore = function getWhitespaceBefore(token) {
    if (!token || !token.loc) return '';
    var src = sourceCode.getText(token, token.loc.start.column);
    var indent = /^(\s+)/.exec(src);
    return indent ? indent[1] : '';
  };

  var checkBlock = function checkBlock(parentNode, expectSameLine) {
    var reportParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!('body' in parentNode) || !('type' in parentNode.body)) return;
    var type = parentNode.body.type;
    if (type !== 'BlockStatement' && type !== 'ClassBody') return;
    var node = parentNode.body;
    var previousToken = sourceCode.getTokenBefore(node);
    var curlyToken = sourceCode.getFirstToken(node);
    var curlyTokenEnd = sourceCode.getLastToken(node);
    if (!previousToken || !curlyTokenEnd || !curlyToken) return;
    var allOnSameLine = previousToken.loc.start.line === curlyTokenEnd.loc.start.line;
    var allowSingleLine = options.allowSingleLine;
    if (allowSingleLine && allOnSameLine) return;
    var reportNode = parentNode || node;
    var whitespace = getWhitespaceBefore(parentNode);

    if (allOnSameLine) {
      var reportDescriptor = {
        node: reportParent ? reportNode.parent : reportNode,
        messageId: NO_SINGLE,
        fix: insertBreakBefore(curlyTokenEnd, whitespace)
      };
      context.report(reportDescriptor);
      return;
    }

    var startSameLine = previousToken.loc.start.line === curlyToken.loc.start.line;

    if (startSameLine !== expectSameLine) {
      var _reportDescriptor = {
        node: reportParent ? reportNode.parent : reportNode,
        messageId: startSameLine ? OPEN_ALLMAN : OPEN,
        fix: startSameLine ? insertBreakBefore(curlyToken, whitespace) : removeBreakBetween(previousToken, curlyToken)
      };
      context.report(_reportDescriptor);
    }

    if (!('body' in node)) return;
    var body = node.body;
    if (!('length' in body) || !body.length) return;

    var _body = (0, _slicedToArray2["default"])(body, 1),
        first = _body[0];

    if (first.loc && first.loc.start.line === curlyToken.loc.start.line) {
      var _reportDescriptor2 = {
        node: first,
        messageId: BODY,
        fix: insertBreakBefore(curlyToken, (0, _lodash.repeat)(' ', first.loc.start.column))
      };
      context.report(_reportDescriptor2);
    }

    var lastToken = body[body.length - 1];
    var endOnSameLine = lastToken.loc && lastToken.loc.end.line === curlyTokenEnd.loc.end.line;

    if (endOnSameLine) {
      var _reportDescriptor3 = {
        node: lastToken,
        messageId: allowSingleLine ? CLOSE_SINGLE : CLOSE,
        fix: insertBreakBefore(curlyTokenEnd, whitespace)
      };
      context.report(_reportDescriptor3);
    }
  };

  var checkNode = function checkNode(type) {
    if (!(type in options)) return _lodash.noop;
    return function (node) {
      var _ref = node,
          parent = _ref.parent;
      var applyParent = type === FUNCTION_EXPRESSION && parent && parent.type === METHOD_DEFINITION && METHOD_DEFINITION in options;
      var expectSameLine = applyParent ? options[METHOD_DEFINITION] : options[type];
      checkBlock(node, expectSameLine, applyParent);
    };
  };

  var result = _objectSpread({}, (0, _braceOnSameLine.create)(context), (_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, CLASS_DECLARATION, checkNode(CLASS_DECLARATION)), (0, _defineProperty2["default"])(_objectSpread2, CLASS_EXPRESSION, checkNode(CLASS_EXPRESSION)), (0, _defineProperty2["default"])(_objectSpread2, FUNCTION_EXPRESSION, checkNode(FUNCTION_EXPRESSION)), (0, _defineProperty2["default"])(_objectSpread2, METHOD_DEFINITION, checkNode(METHOD_DEFINITION)), _objectSpread2));

  return result;
};

var rule = {
  create: create,
  meta: (0, _lodash.merge)({}, _braceOnSameLine.meta || {}, {
    schema: [{
      oneOf: [{}, {
        properties: {
          ClassDeclaration: {
            "enum": [ALWAYS, NEVER, IGNORE]
          }
        }
      }]
    }],
    messages: (_messages = {}, (0, _defineProperty2["default"])(_messages, BODY, 'Statement inside of curly braces should be on next line.'), (0, _defineProperty2["default"])(_messages, CLOSE, 'Closing curly brace does not appear on the same line as the subsequent block.'), (0, _defineProperty2["default"])(_messages, CLOSE_SINGLE, 'Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.'), (0, _defineProperty2["default"])(_messages, NO_SINGLE, 'Single-line blocks defining is not allowed by configuration - brackets must be placed on different lines.'), (0, _defineProperty2["default"])(_messages, OPEN, 'Opening curly brace does not appear on the same line as controlling statement.'), (0, _defineProperty2["default"])(_messages, OPEN_ALLMAN, 'Opening curly brace appears on the same line as controlling statement.'), _messages)
  })
};
var _default = rule;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9icmFjZS1vbi1zYW1lLWxpbmUudHMiXSwibmFtZXMiOlsiQ0xBU1NfREVDTEFSQVRJT04iLCJCbG9ja1R5cGVzIiwiQ0xBU1NfRVhQUkVTU0lPTiIsIkZVTkNUSU9OX0VYUFJFU1NJT04iLCJNRVRIT0RfREVGSU5JVElPTiIsIkJPRFkiLCJNZXNzYWdlSWRzIiwiQ0xPU0UiLCJDTE9TRV9TSU5HTEUiLCJOT19TSU5HTEUiLCJPUEVOIiwiT1BFTl9BTExNQU4iLCJBTFdBWVMiLCJQcm9wZXJ0eVZhbHVlcyIsIklHTk9SRSIsIk5FVkVSIiwiQUxMTUFOIiwiU3R5bGVzIiwiT1RCUyIsImJsb2NrcyIsImluaXRTdHlsZXMiLCJ2YWx1ZSIsInJlZHVjZSIsImFjYyIsInR5cGUiLCJzdHlsZXMiLCJjcmVhdGUiLCJjb250ZXh0Iiwic291cmNlQ29kZSIsImdldFNvdXJjZUNvZGUiLCJzdHlsZVZhbHVlIiwib3B0aW9ucyIsInN0eWxlIiwiZm9yRWFjaCIsImluc2VydEJyZWFrQmVmb3JlIiwidG9rZW4iLCJ3aGl0ZXNwYWNlIiwiZml4ZXIiLCJpbnNlcnRUZXh0QmVmb3JlIiwicmVtb3ZlQnJlYWtCZXR3ZWVuIiwic3RhcnRUb2tlbiIsImVuZFRva2VuIiwicmVwbGFjZVRleHRSYW5nZSIsInJhbmdlIiwiZ2V0V2hpdGVzcGFjZUJlZm9yZSIsImxvYyIsInNyYyIsImdldFRleHQiLCJzdGFydCIsImNvbHVtbiIsImluZGVudCIsImV4ZWMiLCJjaGVja0Jsb2NrIiwicGFyZW50Tm9kZSIsImV4cGVjdFNhbWVMaW5lIiwicmVwb3J0UGFyZW50IiwiYm9keSIsIm5vZGUiLCJwcmV2aW91c1Rva2VuIiwiZ2V0VG9rZW5CZWZvcmUiLCJjdXJseVRva2VuIiwiZ2V0Rmlyc3RUb2tlbiIsImN1cmx5VG9rZW5FbmQiLCJnZXRMYXN0VG9rZW4iLCJhbGxPblNhbWVMaW5lIiwibGluZSIsImFsbG93U2luZ2xlTGluZSIsInJlcG9ydE5vZGUiLCJyZXBvcnREZXNjcmlwdG9yIiwicGFyZW50IiwibWVzc2FnZUlkIiwiZml4IiwicmVwb3J0Iiwic3RhcnRTYW1lTGluZSIsImxlbmd0aCIsImZpcnN0IiwibGFzdFRva2VuIiwiZW5kT25TYW1lTGluZSIsImVuZCIsImNoZWNrTm9kZSIsIm5vb3AiLCJhcHBseVBhcmVudCIsInJlc3VsdCIsInJ1bGUiLCJtZXRhIiwiYmFzZU1ldGEiLCJzY2hlbWEiLCJvbmVPZiIsInByb3BlcnRpZXMiLCJDbGFzc0RlY2xhcmF0aW9uIiwibWVzc2FnZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7SUFRRUEsaUIsR0FJRUMsaUIsQ0FKRkQsaUI7SUFDQUUsZ0IsR0FHRUQsaUIsQ0FIRkMsZ0I7SUFDQUMsbUIsR0FFRUYsaUIsQ0FGRkUsbUI7SUFDQUMsaUIsR0FDRUgsaUIsQ0FERkcsaUI7SUFJQUMsSSxHQU1FQyxpQixDQU5GRCxJO0lBQ0FFLEssR0FLRUQsaUIsQ0FMRkMsSztJQUNBQyxZLEdBSUVGLGlCLENBSkZFLFk7SUFDQUMsUyxHQUdFSCxpQixDQUhGRyxTO0lBQ0FDLEksR0FFRUosaUIsQ0FGRkksSTtJQUNBQyxXLEdBQ0VMLGlCLENBREZLLFc7SUFHTUMsTSxHQUEwQkMscUIsQ0FBMUJELE07SUFBUUUsTSxHQUFrQkQscUIsQ0FBbEJDLE07SUFBUUMsSyxHQUFVRixxQixDQUFWRSxLO0lBQ2hCQyxNLEdBQWlCQyxhLENBQWpCRCxNO0lBQVFFLEksR0FBU0QsYSxDQUFUQyxJO0FBWWhCLElBQU1DLE1BQW9CLEdBQUcsQ0FDM0JuQixpQkFEMkIsRUFFM0JFLGdCQUYyQixFQUczQkMsbUJBSDJCLEVBSTNCQyxpQkFKMkIsQ0FBN0I7O0FBT0EsSUFBTWdCLFVBQVUsR0FBRyxTQUFTQSxVQUFULENBQW9CQyxLQUFwQixFQUE2RDtBQUM5RSxTQUFPRixNQUFNLENBQUNHLE1BQVAsQ0FBYyxVQUFDQyxHQUFELEVBQXdCQyxJQUF4QixFQUFtRDtBQUN0RUQsSUFBQUEs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R0FISTtBQUZzQixDQUE5QjtlQWdDZXdFLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdWxlLCBBU1QsIFNvdXJjZUNvZGUgfSBmcm9tICdlc2xpbnQnO1xuaW1wb3J0IHsgQmxvY2tTdGF0ZW1lbnQsIENsYXNzQm9keSwgTm9kZSB9IGZyb20gJ2VzdHJlZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWRcbmltcG9ydCB7IG1lcmdlLCBub29wLCByZXBlYXQsIERpY3Rpb25hcnkgfSBmcm9tICdsb2Rhc2gnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG9iamVjdC1jdXJseS1uZXdsaW5lXG5pbXBvcnQgeyBjcmVhdGUgYXMgY3JlYXRlQmFzZSwgbWV0YSBhcyBiYXNlTWV0YSB9IGZyb20gJ2VzbGludC1wbHVnaW4tYnJhY2UtcnVsZXMvbGliL3J1bGVzL2JyYWNlLW9uLXNhbWUtbGluZSc7XG5cbmltcG9ydCB7XG4gIEJsb2NrVHlwZXMsXG4gIE1lc3NhZ2VJZHMsXG4gIFByb3BlcnR5VmFsdWVzLFxuICBTdHlsZXMsXG59IGZyb20gJy4uL2VudW1zJztcblxuY29uc3Qge1xuICBDTEFTU19ERUNMQVJBVElPTixcbiAgQ0xBU1NfRVhQUkVTU0lPTixcbiAgRlVOQ1RJT05fRVhQUkVTU0lPTixcbiAgTUVUSE9EX0RFRklOSVRJT04sXG59ID0gQmxvY2tUeXBlcztcblxuY29uc3Qge1xuICBCT0RZLFxuICBDTE9TRSxcbiAgQ0xPU0VfU0lOR0xFLFxuICBOT19TSU5HTEUsXG4gIE9QRU4sXG4gIE9QRU5fQUxMTUFOLFxufSA9IE1lc3NhZ2VJZHM7XG5cbmNvbnN0IHsgQUxXQVlTLCBJR05PUkUsIE5FVkVSIH0gPSBQcm9wZXJ0eVZhbHVlcztcbmNvbnN0IHsgQUxMTUFOLCBPVEJTIH0gPSBTdHlsZXM7XG5cbmludGVyZmFjZSBCbG9ja1BhcmVudCBleHRlbmRzIEJsb2NrU3RhdGVtZW50IHtcbiAgcGFyZW50OiBOb2RlO1xufVxuXG50eXBlIEZpeGVyID0gKGZpeGVyOiBSdWxlLlJ1bGVGaXhlcikgPT4gUnVsZS5GaXg7XG50eXBlIFN0eWxlc0RpY3Rpb25hcnkgPSBEaWN0aW9uYXJ5PFN0cmluZ0RpY3Rpb25hcnk+O1xudHlwZSBTdHJpbmdEaWN0aW9uYXJ5ID0gRGljdGlvbmFyeTxzdHJpbmc+O1xudHlwZSBCb2R5ID0gQmxvY2tTdGF0ZW1lbnQgfCBDbGFzc0JvZHk7XG50eXBlIENoZWNrTm9kZSA9IChub2RlOiBOb2RlKSA9PiB2b2lkO1xuXG5jb25zdCBibG9ja3M6IEJsb2NrVHlwZXNbXSA9IFtcbiAgQ0xBU1NfREVDTEFSQVRJT04sXG4gIENMQVNTX0VYUFJFU1NJT04sXG4gIEZVTkNUSU9OX0VYUFJFU1NJT04sXG4gIE1FVEhPRF9ERUZJTklUSU9OLFxuXTtcblxuY29uc3QgaW5pdFN0eWxlcyA9IGZ1bmN0aW9uIGluaXRTdHlsZXModmFsdWU6IFByb3BlcnR5VmFsdWVzKTogU3RyaW5nRGljdGlvbmFyeSB7XG4gIHJldHVybiBibG9ja3MucmVkdWNlKChhY2M6IFN0cmluZ0RpY3Rpb25hcnksIHR5cGUpOiBTdHJpbmdEaWN0aW9uYXJ5ID0+IHtcbiAgICBhY2NbdHlwZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59O1xuXG5jb25zdCBzdHlsZXM6IFN0eWxlc0RpY3Rpb25hcnkgPSB7XG4gIFtPVEJTXTogaW5pdFN0eWxlcyhBTFdBWVMpLFxuICBbQUxMTUFOXTogaW5pdFN0eWxlcyhORVZFUiksXG59O1xuXG5jb25zdCBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoY29udGV4dDogUnVsZS5SdWxlQ29udGV4dCk6IFJ1bGUuUnVsZUxpc3RlbmVyIHtcbiAgY29uc3Qgc291cmNlQ29kZTogU291cmNlQ29kZSA9IGNvbnRleHQuZ2V0U291cmNlQ29kZSgpO1xuICBjb25zdCBzdHlsZVZhbHVlOiBzdHJpbmcgfCBTdHJpbmdEaWN0aW9uYXJ5ID0gY29udGV4dC5vcHRpb25zWzBdIHx8IE9UQlM7XG4gIGNvbnN0IHN0eWxlOiBTdHJpbmdEaWN0aW9uYXJ5ID0gdHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnID8gc3R5bGVzW3N0eWxlVmFsdWVdIDogc3R5bGVWYWx1ZTtcblxuICBjb25zdCBvcHRpb25zID0geyAuLi5zdHlsZSwgLi4uY29udGV4dC5vcHRpb25zWzFdIH07XG5cbiAgYmxvY2tzLmZvckVhY2goKHR5cGU6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIGlmICghKHR5cGUgaW4gb3B0aW9ucykpIHJldHVybjtcbiAgICBpZiAob3B0aW9uc1t0eXBlXSA9PT0gSUdOT1JFKSB7XG4gICAgICBkZWxldGUgb3B0aW9uc1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uc1t0eXBlXSA9IG9wdGlvbnNbdHlwZV0gPT09IEFMV0FZUztcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGluc2VydEJyZWFrQmVmb3JlID0gZnVuY3Rpb24gaW5zZXJ0QnJlYWtCZWZvcmUodG9rZW46IEFTVC5Ub2tlbiwgd2hpdGVzcGFjZSA9ICcnKTogRml4ZXIge1xuICAgIHJldHVybiAoZml4ZXI6IFJ1bGUuUnVsZUZpeGVyKTogUnVsZS5GaXggPT4gZml4ZXIuaW5zZXJ0VGV4dEJlZm9yZSh0b2tlbiwgYFxcbiR7d2hpdGVzcGFjZX1gKTtcbiAgfTtcblxuICBjb25zdCByZW1vdmVCcmVha0JldHdlZW4gPSBmdW5jdGlvbiByZW1vdmVCcmVha0JldHdlZW4oc3RhcnRUb2tlbjogQVNULlRva2VuLCBlbmRUb2tlbjogQVNULlRva2VuKTogRml4ZXIge1xuICAgIHJldHVybiAoZml4ZXI6IFJ1bGUuUnVsZUZpeGVyKTogUnVsZS5GaXggPT4gZml4ZXIucmVwbGFjZVRleHRSYW5nZShbXG4gICAgICBzdGFydFRva2VuLnJhbmdlWzFdLFxuICAgICAgZW5kVG9rZW4ucmFuZ2VbMF0sXG4gICAgXSwgJyAnKTtcbiAgfTtcblxuICBjb25zdCBnZXRXaGl0ZXNwYWNlQmVmb3JlID0gZnVuY3Rpb24gZ2V0V2hpdGVzcGFjZUJlZm9yZSh0b2tlbjogTm9kZSk6IHN0cmluZyB7XG4gICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4ubG9jKSByZXR1cm4gJyc7XG5cbiAgICBjb25zdCBzcmMgPSBzb3VyY2VDb2RlLmdldFRleHQodG9rZW4sIHRva2VuLmxvYy5zdGFydC5jb2x1bW4pO1xuICAgIGNvbnN0IGluZGVudCA9ICgvXihcXHMrKS8pLmV4ZWMoc3JjKTtcblxuICAgIHJldHVybiBpbmRlbnQgPyBpbmRlbnRbMV0gOiAnJztcbiAgfTtcblxuICBjb25zdCBjaGVja0Jsb2NrID0gZnVuY3Rpb24gY2hlY2tCbG9jayhcbiAgICBwYXJlbnROb2RlOiBOb2RlLFxuICAgIGV4cGVjdFNhbWVMaW5lOiBib29sZWFuLFxuICAgIHJlcG9ydFBhcmVudDogYm9vbGVhbiA9IGZhbHNlLFxuICApOiB2b2lkIHtcbiAgICBpZiAoISgnYm9keScgaW4gcGFyZW50Tm9kZSkgfHwgISgndHlwZScgaW4gcGFyZW50Tm9kZS5ib2R5KSkgcmV0dXJuO1xuXG4gICAgY29uc3QgeyB0eXBlIH0gPSBwYXJlbnROb2RlLmJvZHk7XG4gICAgaWYgKHR5cGUgIT09ICdCbG9ja1N0YXRlbWVudCcgJiYgdHlwZSAhPT0gJ0NsYXNzQm9keScpIHJldHVybjtcblxuICAgIGNvbnN0IG5vZGUgPSBwYXJlbnROb2RlLmJvZHk7XG4gICAgY29uc3QgcHJldmlvdXNUb2tlbiA9IHNvdXJjZUNvZGUuZ2V0VG9rZW5CZWZvcmUobm9kZSk7XG4gICAgY29uc3QgY3VybHlUb2tlbiA9IHNvdXJjZUNvZGUuZ2V0Rmlyc3RUb2tlbihub2RlKTtcbiAgICBjb25zdCBjdXJseVRva2VuRW5kID0gc291cmNlQ29kZS5nZXRMYXN0VG9rZW4obm9kZSk7XG4gICAgaWYgKCFwcmV2aW91c1Rva2VuIHx8ICFjdXJseVRva2VuRW5kIHx8ICFjdXJseVRva2VuKSByZXR1cm47XG5cbiAgICBjb25zdCBhbGxPblNhbWVMaW5lID0gcHJldmlvdXNUb2tlbi5sb2Muc3RhcnQubGluZSA9PT0gY3VybHlUb2tlbkVuZC5sb2Muc3RhcnQubGluZTtcbiAgICBjb25zdCB7IGFsbG93U2luZ2xlTGluZSB9ID0gb3B0aW9ucztcbiAgICBpZiAoYWxsb3dTaW5nbGVMaW5lICYmIGFsbE9uU2FtZUxpbmUpIHJldHVybjtcblxuICAgIGNvbnN0IHJlcG9ydE5vZGUgPSAocGFyZW50Tm9kZSB8fCBub2RlKSBhcyBCbG9ja1BhcmVudDtcbiAgICBjb25zdCB3aGl0ZXNwYWNlID0gZ2V0V2hpdGVzcGFjZUJlZm9yZShwYXJlbnROb2RlKTtcbiAgICBpZiAoYWxsT25TYW1lTGluZSkge1xuICAgICAgY29uc3QgcmVwb3J0RGVzY3JpcHRvcjogUnVsZS5SZXBvcnREZXNjcmlwdG9yID0ge1xuICAgICAgICBub2RlOiByZXBvcnRQYXJlbnQgPyByZXBvcnROb2RlLnBhcmVudCA6IHJlcG9ydE5vZGUsXG4gICAgICAgIG1lc3NhZ2VJZDogTk9fU0lOR0xFLFxuICAgICAgICBmaXg6IGluc2VydEJyZWFrQmVmb3JlKGN1cmx5VG9rZW5FbmQsIHdoaXRlc3BhY2UpLFxuICAgICAgfTtcbiAgICAgIGNvbnRleHQucmVwb3J0KHJlcG9ydERlc2NyaXB0b3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0U2FtZUxpbmUgPSBwcmV2aW91c1Rva2VuLmxvYy5zdGFydC5saW5lID09PSBjdXJseVRva2VuLmxvYy5zdGFydC5saW5lO1xuICAgIGlmIChzdGFydFNhbWVMaW5lICE9PSBleHBlY3RTYW1lTGluZSkge1xuICAgICAgY29uc3QgcmVwb3J0RGVzY3JpcHRvcjogUnVsZS5SZXBvcnREZXNjcmlwdG9yID0ge1xuICAgICAgICBub2RlOiByZXBvcnRQYXJlbnQgPyByZXBvcnROb2RlLnBhcmVudCA6IHJlcG9ydE5vZGUsXG4gICAgICAgIG1lc3NhZ2VJZDogc3RhcnRTYW1lTGluZSA/IE9QRU5fQUxMTUFOIDogT1BFTixcbiAgICAgICAgZml4OiBzdGFydFNhbWVMaW5lID8gaW5zZXJ0QnJlYWtCZWZvcmUoY3VybHlUb2tlbiwgd2hpdGVzcGFjZSkgOiByZW1vdmVCcmVha0JldHdlZW4ocHJldmlvdXNUb2tlbiwgY3VybHlUb2tlbiksXG4gICAgICB9O1xuICAgICAgY29udGV4dC5yZXBvcnQocmVwb3J0RGVzY3JpcHRvcik7XG4gICAgfVxuXG4gICAgaWYgKCEoJ2JvZHknIGluIG5vZGUpKSByZXR1cm47XG4gICAgY29uc3QgeyBib2R5IH0gPSBub2RlO1xuXG4gICAgaWYgKCEoJ2xlbmd0aCcgaW4gYm9keSkgfHwgIWJvZHkubGVuZ3RoKSByZXR1cm47XG4gICAgY29uc3QgW2ZpcnN0XSA9IGJvZHk7XG5cbiAgICBpZiAoZmlyc3QubG9jICYmIGZpcnN0LmxvYy5zdGFydC5saW5lID09PSBjdXJseVRva2VuLmxvYy5zdGFydC5saW5lKSB7XG4gICAgICBjb25zdCByZXBvcnREZXNjcmlwdG9yOiBSdWxlLlJlcG9ydERlc2NyaXB0b3IgPSB7XG4gICAgICAgIG5vZGU6IGZpcnN0LFxuICAgICAgICBtZXNzYWdlSWQ6IEJPRFksXG4gICAgICAgIGZpeDogaW5zZXJ0QnJlYWtCZWZvcmUoY3VybHlUb2tlbiwgcmVwZWF0KCcgJywgZmlyc3QubG9jLnN0YXJ0LmNvbHVtbikpLFxuICAgICAgfTtcbiAgICAgIGNvbnRleHQucmVwb3J0KHJlcG9ydERlc2NyaXB0b3IpO1xuICAgIH1cblxuICAgIGNvbnN0IGxhc3RUb2tlbiA9IGJvZHlbYm9keS5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBlbmRPblNhbWVMaW5lID0gbGFzdFRva2VuLmxvYyAmJiBsYXN0VG9rZW4ubG9jLmVuZC5saW5lID09PSBjdXJseVRva2VuRW5kLmxvYy5lbmQubGluZTtcbiAgICBpZiAoZW5kT25TYW1lTGluZSkge1xuICAgICAgY29uc3QgcmVwb3J0RGVzY3JpcHRvcjogUnVsZS5SZXBvcnREZXNjcmlwdG9yID0ge1xuICAgICAgICBub2RlOiBsYXN0VG9rZW4sXG4gICAgICAgIG1lc3NhZ2VJZDogYWxsb3dTaW5nbGVMaW5lID8gQ0xPU0VfU0lOR0xFIDogQ0xPU0UsXG4gICAgICAgIGZpeDogaW5zZXJ0QnJlYWtCZWZvcmUoY3VybHlUb2tlbkVuZCwgd2hpdGVzcGFjZSksXG4gICAgICB9O1xuICAgICAgY29udGV4dC5yZXBvcnQocmVwb3J0RGVzY3JpcHRvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrTm9kZSA9IGZ1bmN0aW9uIGNoZWNrTm9kZSh0eXBlOiBzdHJpbmcpOiBDaGVja05vZGUge1xuICAgIGlmICghKHR5cGUgaW4gb3B0aW9ucykpIHJldHVybiBub29wO1xuXG4gICAgcmV0dXJuIChub2RlOiBOb2RlKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCB7IHBhcmVudCB9ID0gbm9kZSBhcyBCbG9ja1BhcmVudDtcbiAgICAgIGNvbnN0IGFwcGx5UGFyZW50ID0gKFxuICAgICAgICB0eXBlID09PSBGVU5DVElPTl9FWFBSRVNTSU9OXG4gICAgICAgICYmIHBhcmVudFxuICAgICAgICAmJiBwYXJlbnQudHlwZSA9PT0gTUVUSE9EX0RFRklOSVRJT05cbiAgICAgICAgJiYgTUVUSE9EX0RFRklOSVRJT04gaW4gb3B0aW9uc1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGV4cGVjdFNhbWVMaW5lOiBib29sZWFuID0gYXBwbHlQYXJlbnQgPyBvcHRpb25zW01FVEhPRF9ERUZJTklUSU9OXSA6IG9wdGlvbnNbdHlwZV07XG5cbiAgICAgIGNoZWNrQmxvY2sobm9kZSwgZXhwZWN0U2FtZUxpbmUsIGFwcGx5UGFyZW50KTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IHJlc3VsdDogUnVsZS5SdWxlTGlzdGVuZXIgPSB7XG4gICAgLi4uY3JlYXRlQmFzZShjb250ZXh0KSxcbiAgICBbQ0xBU1NfREVDTEFSQVRJT05dOiBjaGVja05vZGUoQ0xBU1NfREVDTEFSQVRJT04pLFxuICAgIFtDTEFTU19FWFBSRVNTSU9OXTogY2hlY2tOb2RlKENMQVNTX0VYUFJFU1NJT04pLFxuICAgIFtGVU5DVElPTl9FWFBSRVNTSU9OXTogY2hlY2tOb2RlKEZVTkNUSU9OX0VYUFJFU1NJT04pLFxuICAgIFtNRVRIT0RfREVGSU5JVElPTl06IGNoZWNrTm9kZShNRVRIT0RfREVGSU5JVElPTiksXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IHJ1bGU6IFJ1bGUuUnVsZU1vZHVsZSA9IHtcbiAgY3JlYXRlLFxuICBtZXRhOiBtZXJnZShcbiAgICB7fSxcbiAgICBiYXNlTWV0YSB8fCB7fSxcbiAgICB7XG4gICAgICBzY2hlbWE6IFtcbiAgICAgICAge1xuICAgICAgICAgIG9uZU9mOiBbXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIENsYXNzRGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgIGVudW06IFtBTFdBWVMsIE5FVkVSLCBJR05PUkVdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgW0JPRFldOiAnU3RhdGVtZW50IGluc2lkZSBvZiBjdXJseSBicmFjZXMgc2hvdWxkIGJlIG9uIG5leHQgbGluZS4nLFxuICAgICAgICBbQ0xPU0VdOiAnQ2xvc2luZyBjdXJseSBicmFjZSBkb2VzIG5vdCBhcHBlYXIgb24gdGhlIHNhbWUgbGluZSBhcyB0aGUgc3Vic2VxdWVudCBibG9jay4nLFxuICAgICAgICBbQ0xPU0VfU0lOR0xFXTogJ0Nsb3NpbmcgY3VybHkgYnJhY2Ugc2hvdWxkIGJlIG9uIHRoZSBzYW1lIGxpbmUgYXMgb3BlbmluZyBjdXJseSBicmFjZSBvciBvbiB0aGUgbGluZSBhZnRlciB0aGUgcHJldmlvdXMgYmxvY2suJyxcbiAgICAgICAgW05PX1NJTkdMRV06ICdTaW5nbGUtbGluZSBibG9ja3MgZGVmaW5pbmcgaXMgbm90IGFsbG93ZWQgYnkgY29uZmlndXJhdGlvbiAtIGJyYWNrZXRzIG11c3QgYmUgcGxhY2VkIG9uIGRpZmZlcmVudCBsaW5lcy4nLFxuICAgICAgICBbT1BFTl06ICdPcGVuaW5nIGN1cmx5IGJyYWNlIGRvZXMgbm90IGFwcGVhciBvbiB0aGUgc2FtZSBsaW5lIGFzIGNvbnRyb2xsaW5nIHN0YXRlbWVudC4nLFxuICAgICAgICBbT1BFTl9BTExNQU5dOiAnT3BlbmluZyBjdXJseSBicmFjZSBhcHBlYXJzIG9uIHRoZSBzYW1lIGxpbmUgYXMgY29udHJvbGxpbmcgc3RhdGVtZW50LicsXG4gICAgICB9LFxuICAgIH0sXG4gICksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBydWxlO1xuIl19